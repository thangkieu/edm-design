{"version":3,"sources":["components/UIKits.tsx","app/appconfig.ts","services/auth.ts","components/Layout/Side.tsx","components/Logo.tsx","pages/LoginPage/Step1.tsx","pages/LoginPage/Step2.tsx","pages/LoginPage/LoginPage.tsx","pages/LoginPage/index.tsx"],"names":["FormItem","Input","TextArea","Form","Item","Radio","Button","Group","appconfig","title","subTitle","footnote","getOTP","email","a","apiHelpers","authPost","body","JSON","stringify","resp","console","debug","login","otp","Error","saveToken","jwt","removeToken","Container","styled","div","p","bg","css","SideStyle","LayoutSide","memo","props","children","Logo","Title","style","margin","level","className","ActionStyle","RightAction","ContactUsButton","DEFAULT_VALUES","shouldUpdate","prev","curr","Step1","loading","onSubmit","handleSubmit","useCallback","values","onFinish","layout","initialValues","marginBottom","label","name","rules","required","type","autoComplete","placeholder","form","htmlType","disabled","getFieldValue","to","ResetButton","Step2","useState","resending","toggleResend","resendStatus","setResendStatus","resendTimeoutRef","useRef","useEffect","current","clearTimeout","handleResend","validateBy","message","setTimeout","resendBtnLabel","useMemo","Text","prevValues","curValues","onClick","LogoStyle","LoginPage","history","useHistory","toggleLoading","step","setStep","setEmail","setUserInfo","useSetRecoilState","userInfoState","handleSubmitEmail","handleSubmitOtp","expires_in","userInfo","push","italic"],"mappings":"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","file":"static/js/6.f8ebd345.chunk.js","sourcesContent":["import ErrorBoundary from 'antd/lib/alert/ErrorBoundary';\nimport Card from 'antd/lib/card';\nimport Divider from 'antd/lib/divider';\nimport Dropdown from 'antd/lib/dropdown';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport InputNumber from 'antd/lib/input-number';\nimport Menu from 'antd/lib/menu';\nimport Popconfirm from 'antd/lib/popconfirm';\nimport Radio from 'antd/lib/radio';\nimport Tabs from 'antd/lib/tabs';\nimport Tooltip from 'antd/lib/tooltip';\n\nconst TextArea = Input.TextArea;\nconst FormItem = Form.Item;\nconst { Button: RadioButton, Group: RadioGroup } = Radio;\n\nexport {\n  Button,\n  Col,\n  Collapse,\n  Image,\n  Layout,\n  Modal,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Tag,\n  Typography,\n  Upload,\n} from 'antd';\n// upload types\nexport type { UploadChangeParam, UploadFile, UploadFileStatus } from 'antd/lib/upload/interface';\n// custom control\nexport { ColorPicker, IconSelection, PhotoSelection, UploadImage } from './FormControls';\nexport {\n  ErrorBoundary,\n  Input,\n  TextArea,\n  Form,\n  FormItem,\n  RadioGroup,\n  RadioButton,\n  Tabs,\n  Tooltip,\n  Popconfirm,\n  InputNumber,\n  Card,\n  Divider,\n  Menu,\n  Dropdown,\n};\n","export const appconfig = {\n  title: 'EDM Composer',\n  subTitle: 'Generate a customised EDM design',\n  footnote: 'Â©Created by Data Science & AI Division, GovTech',\n};\n","import { apiHelpers } from './api';\nimport { removeToken, saveToken } from './api/base-api';\n\nexport const getOTP = async (email: string) => {\n  try {\n    const resp: FetchOTPResp = await apiHelpers.authPost('/email_otp', {\n      body: JSON.stringify({ email }),\n    });\n\n    return resp;\n  } catch (err) {\n    console.debug(err);\n  }\n\n  return null;\n};\n\nexport const login = async (email: string, otp: number) => {\n  try {\n    const resp: FetchTokenRespSuccess = await apiHelpers.authPost('/get_jwt_token', {\n      body: JSON.stringify({ email, otp }),\n    });\n\n    if (!resp) throw Error('Error');\n\n    saveToken(resp.jwt);\n\n    return resp;\n  } catch (err) {\n    console.debug(err);\n    removeToken();\n  }\n\n  return null;\n};\n\nexport const logout = () => {\n  removeToken();\n};\n","import React, { memo } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Container = styled.div<{ bg?: string }>`\n  display: flex;\n  height: 100vh;\n  justify-content: flex-end;\n\n  ${(p) =>\n    p.bg &&\n    css`\n      background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.5)), url('${p.bg}');\n      background-size: cover;\n    `}\n`;\n\nconst SideStyle = styled.div`\n  height: 100%;\n  max-width: 40em;\n  flex-grow: 1;\n  justify-self: flex-end;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  padding: 1em 4em;\n  flex-direction: column;\n  box-shadow: 0 0 10px 5px rgb(255 255 255 / 20%);\n`;\n\nexport const LayoutSide = memo((props) => {\n  return (\n    <Container bg=\"https://picsum.photos/id/1029/4887/2759\">\n      <SideStyle>{props.children}</SideStyle>\n    </Container>\n  );\n});\n","import { appconfig } from '@app/appconfig';\nimport { Typography } from '@uikits';\nimport { FC, memo } from 'react';\n\ninterface LogoProps {\n  className?: string;\n}\n\nexport const Logo: FC<LogoProps> = memo((props) => (\n  <Typography.Title style={{ margin: 0 }} level={1} className={props.className}>\n    {appconfig.title}\n  </Typography.Title>\n));\n","import { Button, Form, FormItem, Input, Typography } from '@uikits';\nimport React, { memo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst ActionStyle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nconst RightAction = styled.div`\n  text-align: right;\n`;\n\nconst ContactUsButton = styled(Button)`\n  margin-right: -23px;\n`;\n\ninterface StepProps {\n  loading?: boolean;\n  onSubmit?(email: string): void;\n}\n\ntype FormValues = {\n  email: string;\n};\n\nconst DEFAULT_VALUES = { email: '' };\n\nfunction shouldUpdate(prev: FormValues, curr: FormValues) {\n  return prev.email !== curr.email;\n}\n\nexport const Step1 = memo<StepProps>(({ loading, onSubmit }) => {\n  const handleSubmit = useCallback(\n    (values: FormValues) => {\n      onSubmit?.(values.email);\n    },\n    [onSubmit]\n  );\n\n  return (\n    <Form onFinish={handleSubmit} layout=\"vertical\" initialValues={DEFAULT_VALUES}>\n      <Typography style={{ marginBottom: '1rem' }}>\n        Enter your Email Addess and we will send you One-Time Password (OTP) to enter below.\n      </Typography>\n\n      <FormItem\n        label=\"Email\"\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            type: 'email',\n          },\n        ]}\n      >\n        <Input autoComplete=\"off\" placeholder=\"abc@example.com\" type=\"email\" />\n      </FormItem>\n      <FormItem shouldUpdate={shouldUpdate}>\n        {(form) => (\n          <ActionStyle>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              disabled={!form.getFieldValue('email')}\n            >\n              Get OTP\n            </Button>\n            <RightAction>\n              <Typography>Not a registered user yet?</Typography>\n              <ContactUsButton type=\"link\">\n                <Link to=\"https://google.com\">Contact Us.</Link>\n              </ContactUsButton>\n            </RightAction>\n          </ActionStyle>\n        )}\n      </FormItem>\n    </Form>\n  );\n});\n","import { getOTP } from '@services/auth';\nimport { Button, Form, FormItem, Input, Space, Typography } from '@uikits';\nimport { validateBy } from '@utils/helpers';\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\ninterface StepProps {\n  loading?: boolean;\n  email: string;\n  onSubmit?(otp: number): void;\n}\n\ntype FormValues = {\n  otp: number;\n};\n\nconst DEFAULT_VALUES = {\n  otp: '',\n};\n\nconst ResetButton = styled(Button)`\n  padding-left: 0;\n  padding-right: 0;\n`;\n\nexport const Step2 = memo<StepProps>(({ loading, email, onSubmit }) => {\n  const [resending, toggleResend] = useState(false);\n  const [resendStatus, setResendStatus] = useState('');\n\n  const resendTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(\n    () => () => {\n      if (resendTimeoutRef.current) clearTimeout(resendTimeoutRef.current);\n    },\n    []\n  );\n\n  const handleSubmit = useCallback(\n    (values: FormValues) => {\n      if (values.otp) onSubmit?.(values.otp);\n    },\n    [onSubmit]\n  );\n\n  const handleResend = useCallback(async () => {\n    if (!email || !validateBy('email', email)) return;\n\n    toggleResend(true);\n    const resp = await getOTP(email);\n    if (resp?.message) setResendStatus(resp?.message);\n    resendTimeoutRef.current = setTimeout(() => void setResendStatus(''), 5000);\n\n    toggleResend(false);\n  }, [email]);\n\n  const resendBtnLabel = useMemo(() => {\n    if (resending) return 'Resending...';\n    if (resendStatus) return resendStatus;\n\n    return 'Resend OTP';\n  }, [resending, resendStatus]);\n\n  return (\n    <Form onFinish={handleSubmit} layout=\"vertical\" initialValues={DEFAULT_VALUES}>\n      <Typography.Text type=\"secondary\">\n        An OTP has been emailed to you. Enter OTP below.\n      </Typography.Text>\n\n      <FormItem label=\"One-Time Password\" name=\"otp\">\n        <Input placeholder=\"OTP\" type=\"number\" />\n      </FormItem>\n\n      <Space>\n        <FormItem\n          style={{ margin: 0 }}\n          shouldUpdate={(prevValues, curValues) => prevValues.otp !== curValues.otp}\n        >\n          {(form) => (\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              disabled={!form.getFieldValue('otp')}\n            >\n              Login\n            </Button>\n          )}\n        </FormItem>\n        {resendStatus ? (\n          <Typography.Text type=\"success\">{resendStatus}</Typography.Text>\n        ) : (\n          <ResetButton htmlType=\"button\" type=\"link\" onClick={handleResend}>\n            {resendBtnLabel}\n          </ResetButton>\n        )}\n      </Space>\n    </Form>\n  );\n});\n","import { getOTP, login } from '@services/auth';\nimport { Typography } from '@uikits';\nimport React, { memo, useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { LayoutSide } from '../../components/Layout/Side';\nimport { Logo } from '../../components/Logo';\nimport { userInfoState } from '../../recoil-atoms/user-info';\nimport { Step1 } from './Step1';\nimport { Step2 } from './Step2';\n\nconst LogoStyle = styled(Logo)`\n  font-size: 3em;\n`;\n\nexport const LoginPage = memo(() => {\n  const history = useHistory();\n\n  const [loading, toggleLoading] = useState(false);\n  const [step, setStep] = useState(1);\n  const [email, setEmail] = useState('');\n\n  const setUserInfo = useSetRecoilState(userInfoState);\n\n  const handleSubmitEmail = useCallback(async (email: string) => {\n    if (!email) return;\n\n    toggleLoading(true);\n    const resp = await getOTP(email);\n\n    toggleLoading(false);\n\n    if (!resp) return;\n\n    setEmail(email);\n    setStep(2);\n  }, []);\n\n  const handleSubmitOtp = useCallback(\n    async (otp: number) => {\n      if (!email || !otp) return;\n\n      toggleLoading(true);\n      const resp = await login(email, otp);\n\n      toggleLoading(false);\n\n      if (!resp) return;\n\n      const { jwt, expires_in, ...userInfo } = resp;\n\n      if (userInfo.email) {\n        setUserInfo(userInfo);\n        history.push('/');\n      }\n    },\n    [email, history, setUserInfo]\n  );\n\n  return (\n    <LayoutSide>\n      <LogoStyle />\n      <Typography.Text type=\"secondary\" italic>\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n      </Typography.Text>\n      <br />\n      {step === 1 && <Step1 loading={loading} onSubmit={handleSubmitEmail} />}\n      {step === 2 && <Step2 loading={loading} onSubmit={handleSubmitOtp} email={email} />}\n    </LayoutSide>\n  );\n});\n\nexport default LoginPage;\n","import { LoginPage } from './LoginPage';\nexport default LoginPage;\n"],"sourceRoot":""}